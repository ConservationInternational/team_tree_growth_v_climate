model {
    ##########################################################################
    # Likelihood
    for (i in 1:n_tree) {
        for (t in (first_obs_period[i] + 1):last_obs_period[i]) {
            dbh_predicted[i, t] <- int +
                slp_dbh * dbh_latent[i, t - 1] +
                slp_dbh_sq * pow(dbh_latent[i, t - 1], 2) +
                slp_WD * WD[i] +
                slp_WD_sq * WD_sq[i] +
                slp_spi * spi[i, t] +
                int_ijk[i] +
                int_jk[plot_ID[i]] +
                int_k[site_ID[i]] +
                int_g[genus_ID[i]] +
                slp_g_spi[genus_ID[i]] * spi[i, t] +
                slp_g_dbh[genus_ID[i]] * dbh_latent[i, t - 1] +
                slp_g_dbh_sq[genus_ID[i]] * pow(dbh_latent[i, t - 1], 2) +
                int_t[t]

            dbh_latent[i, t] ~ dnorm(dbh_predicted[i, t], proc_prec)
        }

        for (t in (first_obs_period[i]):last_obs_period[i]) {
            dbh[i, t] ~ dnorm(dbh_latent[i, t], obs_prec)
        }
        # Specially handle first latent dbh (following Eitzen, 2013):
        dbh_latent[i, first_obs_period[i]] ~ dnorm(0, 1.0E-6)
    }

    ##########################################################################
    # Fixed effects
    int ~ dnorm(0, 1.0E-6)
    slp_dbh ~ dnorm(0, 1.0E-6)
    slp_dbh_sq ~ dnorm(0, 1.0E-6)
    slp_WD ~ dnorm(0, 1.0E-6)
    slp_WD_sq ~ dnorm(0, 1.0E-6)
    slp_spi ~ dnorm(0, 1.0E-6)
    inter_spi_dbh ~ dnorm(0, 1.0E-6)
    inter_spi_WD ~ dnorm(0, 1.0E-6)

    obs_prec <- pow(obs_sigma, -2)
    # Base observation sigma on precision of diameter measurements, following 
    # Eitzel 2013
    obs_sigma ~ dunif(0.007034428, 100)

    proc_prec <- pow(proc_sigma, -2)
    proc_sigma ~ dunif(0, 100)

    ##########################################################################
    # Nested random effects
    for (i in 1:n_tree) {
        int_ijk[i] ~ dnorm(0, tau_ijk)
    }
    tau_ijk <- pow(sigma_ijk, -2)
    sigma_ijk ~ dunif(0, 100)

    for (j in 1:n_plot) {
        int_jk[j] ~ dnorm(0, tau_jk)
    }
    tau_jk <- pow(sigma_jk, -2)
    sigma_jk ~ dunif(0, 100)

    for (k in 1:n_site) {
        int_k[k] ~ dnorm(0, tau_k)
    }
    tau_k <- pow(sigma_k, -2)
    sigma_k ~ dunif(0, 100)

    ##########################################################################
    # Crossed random effects
    
    for (t in 1:n_period) {
        int_t[t] ~ dnorm(0, tau_t)
    }
    tau_t <- pow(sigma_t, -2)
    sigma_t ~ dunif(0, 100)

    # Genus level
    #
    #   Model int_spi, slp_g_dbh_sq, and slp_g_dbh as correlated random effects.
 
    # Set up the means for the multivariate ranef distribution
    for (i in 1:4) {
        xi[i] ~ dunif(0, 100)
        mu_raw[i] ~ dnorm(0, .0001)
        mu[i] <- xi[i] * mu_raw[i]
    }
    mu_int_g <- mu[1]
    mu_slp_g_spi <- mu[2]
    mu_slp_g_dbh <- mu[3]
    mu_slp_g_dbh_sq <- mu[4]

    Tau_B_raw[1:4, 1:4] ~ dwish(W[,], 5)
    Sigma_B_raw[1:4, 1:4] <- inverse(Tau_B_raw[,])
    for (i in 1:4) {
        sigma[i] <- xi[i] * sqrt(Sigma_B_raw[i, i])
    }
    sigma_int_g <- sigma[1]
    sigma_slp_g_spi <- sigma[2]
    sigma_slp_g_dbh <- sigma[3]
    sigma_slp_g_dbh_sq <- sigma[4]

    for (i in 1:4) {
        for (j in 1:4) {
            rho[i, j] <- Sigma_B_raw[i, j]/sqrt(Sigma_B_raw[i, i]*Sigma_B_raw[j, j])
        }
    }
    rho_int_g_slp_g_spi <- rho[1, 2]
    rho_int_g_slp_g_dbh <- rho[1, 3]
    rho_int_g_slp_g_dbh_sq <- rho[1, 4]
    rho_slp_g_spi_slp_g_dbh <- rho[2, 3]
    rho_slp_g_spi_slp_g_dbh_sq <- rho[2, 4]
    rho_slp_g_dbh_slp_g_dbh_sq <- rho[3, 4]

    for (g in 1:n_genus) {
        B_raw_hat[g, 1] <- mu_raw[1]
        B_raw_hat[g, 2] <- mu_raw[2]
        B_raw_hat[g, 3] <- mu_raw[3]
        B_raw_hat[g, 4] <- mu_raw[4]
        B_raw[g, 1:4] ~ dmnorm(B_raw_hat[g, ], Tau_B_raw[, ])
        int_g[g] <- xi[1]*B_raw[g, 1]
        slp_g_spi[g] <- xi[2]*B_raw[g, 2]
        slp_g_dbh[g] <- xi[3]*B_raw[g, 3]
        slp_g_dbh_sq[g] <- xi[4]*B_raw[g, 4]
    }

    for (i in 1:4) {
        xi_prior[i] ~ dunif(0, 100)
        mu_raw_prior[i] ~ dnorm(0, .0001)
        mu_prior[i] <- xi_prior[i]*mu_raw_prior[i]
    }

    Tau_B_raw_prior[1:4, 1:4] ~ dwish(W[,], 5)
    Sigma_B_raw_prior[1:4, 1:4] <- inverse(Tau_B_raw_prior[,])
    for (i in 1:4) {
        sigma_prior[i] <- xi_prior[i]*sqrt(Sigma_B_raw_prior[i, i])
    }

    for (i in 1:4) {
        for (j in 1:4) {
            rho_prior[i, j] <- Sigma_B_raw_prior[i, j]/sqrt(Sigma_B_raw_prior[i, i]*Sigma_B_raw_prior[j, j])
        }
    }
}
