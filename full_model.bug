model {
    ###########################################################################
    # Parameters:
    #   B[1]: fixed effect - wood density
    #   B[2]: fixed effect - wood density (squared)
    #   int_jk: random intercept - plot level
    #   int_k: random intercept - site level
    #   int_t: random intercept - by period
    #   B_g[g, 1]: random intercept for genus g
    #   B_g[g, 2]: random slope on precip genus g
    #   B_g[g, 3]: random slope on precip (squared) genus g
    #   B_g[g, 4]: random slope on temperature genus g
    #   B_g[g, 5]: random slope on temperature (squared) genus g
    #   B_g[g, 6]: random slope on initial diameter genus g
    #   B_g[g, 7]: random slope on initial diameter (squared) genus g
    #   B_T[k, 1]: intercept in temperature model for site k
    #   B_T[k, 2]: lapse rate in temperature model for site k
    #   sigma_obs: std. dev. of observation error
    #   sigma_proc: std. dev. of residual error
    #   sigma_jk: std. dev. of plot-level random intercept
    #   sigma_k: std. dev. of site-level random intercept
    #   sigma_t: std. dev. of period random intercept
    #   sigma_B_g: variance-covariance matrix of genus-level random effects
    #   mu_B_g: mean of genus-level random effects
    #   rho_B_g: correlation matrix of genus-level random effects
    ###########################################################################

    ##########################################################################
    # Likelihood
    for (i in 1:n_tree) {
        for (t in (first_obs_period[i] + 1):last_obs_period[i]) {
            dbh_predicted[i, t] <- B[1] * WD[i] +
                B[2] * WD_sq[i] +
                int_jk[plot_ID[i]] +
                int_k[site_ID[i]] +
                int_t[t - 1] +
                B_g[genus_ID[i], 1] +
                B_g[genus_ID[i], 2] * precip[i, t] +
                B_g[genus_ID[i], 3] * precip_sq[i, t] +
                B_g[genus_ID[i], 4] * (temp[i, t] + B_T_int[site_ID[i]] + B_T_lapse[site_ID[i]] * elev[plot_ID[i]]) +
                B_g[genus_ID[i], 5] * pow(temp[i, t] + B_T_int[site_ID[i]] + B_T_lapse[site_ID[i]] * elev[plot_ID[i]], 2) +
                B_g[genus_ID[i], 6] * dbh_latent[i, t - 1] +
                B_g[genus_ID[i], 7] * pow(dbh_latent[i, t - 1], 2)

            dbh_latent[i, t] ~ dnorm(dbh_predicted[i, t], prec_proc)
        }

        for (t in (first_obs_period[i]):last_obs_period[i]) {
            dbh[i, t] ~ dnorm(dbh_latent[i, t], prec_obs)
        }

        # Handle first latent dbh (for which there is no prediction)
        dbh_latent[i, first_obs_period[i]] ~ dnorm(0, 1.0E-4)
    }

    ##########################################################################
    # Fixed effects
    for (k in 1:n_B) {
        B[k] ~ dnorm(0, 1.0E-4)
    }

    ##########################################################################
    # Observation and process error
    prec_obs <- pow(sigma_obs, -2)
    # Base sigma_obs on precision of dbh measurements (following Eitzel 2013)
    sigma_obs ~ dunif(sigma_obs_lower, 1)

    prec_proc <- pow(sigma_proc, -2)
    sigma_proc ~ dunif(0, 10)

    ##########################################################################
    # Nested random effects
    for (j in 1:n_plot) {
        int_jk[j] ~ dnorm(0, tau_int_jk)
    }
    tau_int_jk <- pow(sigma_int_jk, -2)
    sigma_int_jk ~ dunif(0, 10)

    for (k in 1:n_site) {
        int_k[k] ~ dnorm(0, tau_int_k)
    }
    tau_int_k <- pow(sigma_int_k, -2)
    sigma_int_k ~ dunif(0, 10)

    ##########################################################################
    # Period random effects (crossed)
    for (t in 1:n_period) {
        int_t[t] ~ dnorm(0, tau_int_t)
    }
    tau_int_t <- pow(sigma_int_t, -2)
    sigma_int_t ~ dunif(0, 10)

    ##########################################################################
    # Correlated random effects at genus level (crossed). Based on Gelman and 
    # Hill pg. 377-378.
    for (g in 1:n_genus) {
        for (k in 1:n_B_g) {
            B_g[g, k] <- xi[k] * B_g_raw[g, k]
        }
        B_g_raw[g, 1:n_B_g] ~ dmnorm(mu_B_g_raw[], Tau_B_g_raw[ , ])
    }

    # Set up the means for the multivariate ranef distribution
    for (k in 1:n_B_g) {
        xi[k] ~ dunif(0, 100)
        mu_B_g_raw[k] ~ dnorm(0, 1.0E-4)
        mu_B_g[k] <- xi[k] * mu_B_g_raw[k]
    }

    # Set up the variance-covariance matrix
    Tau_B_g_raw[1:n_B_g, 1:n_B_g] ~ dwish(W[ , ], df)
    df <- n_B_g + 1
    Sigma_B_g_raw[1:n_B_g, 1:n_B_g] <- inverse(Tau_B_g_raw[,])
    for (k in 1:n_B_g) {
        for (k_prime in 1:n_B_g) {
            rho_B_g[k, k_prime] <- Sigma_B_g_raw[k, k_prime]/sqrt(Sigma_B_g_raw[k, k] * Sigma_B_g_raw[k_prime, k_prime])
        }
        sigma_B_g[k] <- abs(xi[k]) * sqrt(Sigma_B_g_raw[k, k])
    }

    ##########################################################################
    # Temperature model
    for (k in 1:n_site) {
        # Prior on intercept
        B_T_int[k] ~ dnorm(0, 1.0E-4)
        # Prior on lapse rate (recall lapse rate is defined as rate of decrease 
        # of temp with increase in elevation, so the below truncation to make 
        # B_T[k, 2] less than zero means that lapse rate is constrained to be 
        # positive).
        B_T_lapse[k] ~ dnorm(lapse_mean, lapse_prec) I(, 0)
    }
}
