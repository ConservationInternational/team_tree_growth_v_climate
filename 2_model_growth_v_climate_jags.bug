model {
    # Likelihood
    for (tree_num in 1:n_tree) {
        for (obs_num in 1:n_obs_per_tree[i]) {
            growth[(tree_num-1)*max_obs_per_tree + obs_num] <- log(exp(log_dbh_latent[obs_index]), exp(log_dbh_latent[obs_index - 1]));
        }
    }
        y[i] ~ dnorm(y.hat[i], tau.y)
        y.hat[i] <- beta_0 + b_ijk[ID_tree[i]] + b_jk[ID_plot[i]] + b_k[ID_site[i]] + slp_dbh * exp(log_dbh_latent_st[i])

        growth_hat[i] <- beta_0 + b_ijk[ID_tree[i]] + b_jk[ID_plot[i]] + b_k[ID_site[i]] + slp_dbh * exp(log_dbh_latent_st[i])

        # For the below trick see http://bit.ly/1uFTjlx
        ln_dia_inc.true[n] <- log(exp(ln_dbh_end_latent[n]) - exp(ln_dbh_st_latent[n]))
        ln_dia_inc.minus[n] <- ln_dia_inc.true[n] - ln_dia_inc.pred[n]

    }
    tau.y <- pow(sigma.y, -2)
    sigma.y ~ dunif(0, 100)

    # Fixed intercept
    beta_0 ~ dnorm(0, .0001)

    # Fixed slopes, prior is normally distributed with mean zero, sd 100
    slp_dbh ~ dnorm(0, .0001)

    # Tree-level model
    for (l in 1:n_tree) {
        u[l] ~ dnorm(0, tau.u) # Random intercept at tree-level
    }
    tau.u <- pow(sigma.u, -2)
    sigma.u ~ dunif(0, 100)

    # Plot-level model
    for (j in 1:n_plot) {
        v1[j] <- V[j, 1]
        v2[j] <- V[j, 2]
        V[j, 1:2] ~ dmnorm(V.hat[j,], tau.V[,])
        V.hat[j, 1] <- mu.v1
        V.hat[j, 2] <- mu.v2
    }

    mu.v1 ~ dnorm(0, .0001)
    mu.v2 ~ dnorm(0, .0001)
    tau.V[1:2,1:2] <- inverse(Sigma.V[,])
    # Variances of the random effects
    sigma.V[1, 1] <- pow(sigma.v1, 2)
    sigma.v1 ~ dunif(0, 100)
    sigma.V[2, 2] <- pow(sigma.v2, 2)
    sigma.v2 ~ dunif(0, 100)
    # Correlation
    sigma.V[1, 2] <- rho*sigma.v1*sigma.v2
    sigma.V[2, 1] <- sigma.V[1, 2]
    rho ~ dunif(-1, 1)

    for (k in 1:n_site) {
        w[k] ~ dnorm(0, tau.w) # Random intercept at site-level
    }
    tau.w <- pow(sigma.w, -2)
    sigma.w ~ dunif(0, 100)

    # Period-level model
    for (t in 1:n_period) {
        z[t] ~ dnorm(0, tau.z) # Random intercept by period
    }
    tau.z <- pow(sigma.z, -2)
    sigma.z ~ dunif(0, 100)
}
